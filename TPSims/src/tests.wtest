import Abrazos.*
import Celos.*
import EstadosDeAnimo.*
import Personalidades.*
import Sim.*
import SituacionesSentimentales.*

 

test "1.0 - Hacer que un Sim abrace a otro con abrazo comun: Si Maria tiene felicidad=20 y abraza a Federico de felicidad=30, entonces Maria nivelFelicidad=22 y Federico nivelFelicidad=34 "{
	var maria = new Sim() maria.nivelFelicidad(20)
	var federico = new Sim() federico.nivelFelicidad(30)
	
	maria.abrazarA(federico, abrazoComun)
	
	assert.equals(22,maria.nivelFelicidad())
	assert.equals(34,federico.nivelFelicidad())
	
}

test "1.1 Hacer que un Sim abrace a otro con abrazo prolongado: Maria abraza a Federico y este se siente atraido, entonces Federico se pone soniador"{
	
	var maria = new Sim() 
	var federico = new Sim() 
	
	//para que a federico le atraiga Maria:
	federico.preferenciaSexual("Mujer")
	maria.sexo("Mujer")
	
	federico.personalidad(buenazo)
	
	
	maria.abrazarA(federico, abrazoProlongado)
	
	assert.equals(soniador, federico.estadoDeAnimo())
	
	
}

test "1.2 Hacer que un Sim abrace a otro con abrazo prolongado: Martin abraza a Federico y pero este no se siente atraido, entonces Federico se pone incomodo"{
	var martin = new Sim() martin.sexo("Hombre")
	var federico = new Sim() federico.personalidad(buenazo)
	
	
	
	martin.abrazarA(federico, abrazoProlongado)
	
	assert.equals(incomodo, federico.estadoDeAnimo())
}

test "2.0 - Si Juan es interesado y valora a Felipe, asigna valor a Felipe como el 10% del dinero de los amigos de Felipe"{
	var felipe=new Sim()
	var juan=new Sim()
	var erwin= new Sim()
	var rodrigo = new Sim()
	erwin.dinero(500)
	rodrigo.dinero(100)
	
	juan.personalidad(interesado)
	felipe.amigos([erwin,rodrigo])

	
	assert.equals(60,juan.valorarA(felipe))		
}

test "2.1 - Si Lucas es superficial y valora a Felipe, devuelve el 20*nivelPopularidad de Felipe"{
	var lucas = new Sim()
	var felipe = new Sim()
  	var mariano=new Sim()
  	var carolina=new Sim()
  	
  	//se agregan amigos y nivel de felicidad de cada uno para poder calcular nivelPopularidad de Felipe
  	felipe.agregarAmigo(mariano)
  	felipe.agregarAmigo(carolina)
  	
  	mariano.nivelFelicidad(50)
  	carolina.nivelFelicidad(20)
    //nivelPopularidad de Felipe = 70; la valoracion debe dar 1400 (20*70)
    
	lucas.personalidad(superficial)
	
	assert.equals(1400,lucas.valorarA(felipe))
}

test "2.2 - Si Ernesto tiene nivelFelicidad de 1000, asigna una valoración de 500 tanto a María como a Héctor "{
	var ernesto = new Sim()
	var maria = new Sim()
	var hector = new Sim()
	
	ernesto.personalidad(buenazo)
	ernesto.nivelFelicidad(1000)
	
	assert.equals(500,ernesto.valorarA(maria))
	assert.equals(500,ernesto.valorarA(hector))
	
}

test "2.3 - Si Matías es peleadoConLaVida, valoran a cualquiera con 0"{
	var matias = new Sim()
	var ernesto = new Sim()
	var lucas = new Sim()
	
	matias.personalidad(peleadoConLaVida)
	ernesto.personalidad(buenazo)
	lucas.personalidad(superficial)
	
	assert.equals(0,matias.valorarA(ernesto))
	assert.equals(0,matias.valorarA(superficial))
}

test "3.0 - Saber quién es el amigo a quién más valora un Sim: El amigo más valorado de Felipe (interesado) es "{
	var felipe = new Sim()
  	var mariano=new Sim()
  	var carolina=new Sim()
	
	felipe.personalidad(interesado)
  	
  	var amigoMariano1 = new Sim() amigoMariano1.dinero(200)
  	var amigoMariano2 = new Sim() amigoMariano2.dinero(400)
    mariano.amigos([amigoMariano1,amigoMariano2])
    
  	var amigoCarolina1 = new Sim() amigoCarolina1.dinero(150)
  	var amigoCarolina2 = new Sim() amigoCarolina2.dinero(500)
  	carolina.amigos([amigoCarolina1,amigoCarolina2])
  	
  	felipe.amigos([mariano,carolina])
  	
  	assert.equals(carolina,felipe.simMasValorado())
}

test "3.1 - Felipe (superficial) tiene como amigo más valorado a Mariano"{
	var felipe = new Sim() felipe.personalidad(superficial)
	var mariano= new Sim() 
	var carolina = new Sim()
	
	var amigoMariano1 = new Sim() amigoMariano1.nivelFelicidad(80)
	var amigoMariano2 = new Sim() amigoMariano2.nivelFelicidad(70)
	mariano.amigos([amigoMariano1,amigoMariano2])
	
	var amigoCarolina1 = new Sim() amigoCarolina1.nivelFelicidad(50)
	var amigoCarolina2 = new Sim() amigoCarolina2.nivelFelicidad(35)
	carolina.amigos([amigoCarolina1,amigoCarolina2])
	
	//por ende mariano va a tener mayor nivel de popularidad porque sus amigos son más felices
	
	felipe.amigos([mariano,carolina])
	
	assert.equals(mariano,felipe.simMasValorado())
	
}

test "4 - Hacer que un Sim se haga amigo de otro: Se modifica el nivelDeFelicidad al hacerse amigo"{
	
	
	var matias = new Sim() matias.personalidad(buenazo) matias.nivelFelicidad(1000)
    var ariel = new Sim() 
    
    matias.hacerseAmigoDe(ariel)
    
    assert.that(matias.esAmigoDe(ariel))
    assert.equals(1500,matias.nivelFelicidad())
	
}

test "5 - Hacer que dos amigos se hagan entre sí"{
	var matias = new Sim() matias.personalidad(buenazo) matias.nivelFelicidad(1000)
    var ariel = new Sim() ariel.personalidad(buenazo) ariel.nivelFelicidad(500)  
    
    matias.hacerAmistadMutua(ariel)
    
    assert.that(matias.esAmigoDe(ariel) and ariel.esAmigoDe(matias)) 
}

test "6 - Saber si un Sim es Amigo de otro"{
	var matias = new Sim() matias.personalidad(buenazo) matias.nivelFelicidad(1000)
    var ariel = new Sim() ariel.personalidad(buenazo) ariel.nivelFelicidad(500)  
   
    matias.hacerseAmigoDe(ariel)
    
    matias.esAmigoDe(ariel)
    
    assert.that(matias.amigos().any({unAmigo => unAmigo === ariel}))    
}

test "7 - Preguntarle a un Sim cuales son sus 4 amigos más nuevos" {
	var matias = new Sim() matias.personalidad(buenazo) matias.nivelFelicidad(200)
	var amigo1 = new Sim()
	var amigo2 = new Sim()
	var amigo3 = new Sim()
	var amigo4 = new Sim()
	var amigo5 = new Sim()
	var amigo6 = new Sim()
	
	matias.agregarAmigo(amigo1)
	matias.agregarAmigo(amigo2)
	matias.agregarAmigo(amigo3)
	matias.agregarAmigo(amigo4)
	matias.agregarAmigo(amigo5)
	matias.agregarAmigo(amigo6)
	
	assert.equals([amigo1,amigo2,amigo3,amigo4],matias.cantAmigosMasNuevos(4))
		
}	


test "8 - Preguntarle a un Sim cuales son sus 4 amigos más antiguos"{
	var matias = new Sim() matias.personalidad(buenazo) matias.nivelFelicidad(200)
	var amigo1 = new Sim()
	var amigo2 = new Sim()
	var amigo3 = new Sim()
	var amigo4 = new Sim()
	var amigo5 = new Sim()
	var amigo6 = new Sim()
	
	matias.agregarAmigo(amigo1)
	matias.agregarAmigo(amigo2)
	matias.agregarAmigo(amigo3)
	matias.agregarAmigo(amigo4)
	matias.agregarAmigo(amigo5)
	matias.agregarAmigo(amigo6)
	
	assert.equals([amigo3,amigo4,amigo5,amigo6],matias.cantAmigosMasViejos(4))
}


test "9 - Preguntarse a unSim cual es su nivel de popularidad: Si Felipe tiene amigos, quienes tienen 50 y 20 de nivelFelicidad respectivamente, su nivelPopularidad es 70" {
  	var felipe=new Sim()
  	var mariano=new Sim()
  	var carolina=new Sim()
  	
  	felipe.agregarAmigo(mariano)
  	felipe.agregarAmigo(carolina)
  	
  	mariano.nivelFelicidad(50)
  	carolina.nivelFelicidad(20)
  	
  	assert.equals(70,felipe.nivelPopularidad())	
}

test "10 - Preguntarle a un Sim si es el mas popular de su circulo de amigos"{
	var matias = new Sim() matias.nivelFelicidad(50)
	var amigo1 = new Sim() amigo1.nivelFelicidad(40)
	var amigo2 = new Sim() amigo2.nivelFelicidad(20)
	var amigo3 = new Sim() amigo3.nivelFelicidad(15)
	
	matias.amigos([amigo1,amigo2,amigo3]) //nivelPopularidad: 75 (40+20+15)
	amigo1.amigos([amigo2,amigo3]) //nivelPopularidad: 35 (20+15)
	amigo2.amigos([amigo1])//nivelPopularidad: 40 (40)
	amigo3.amigos([matias])//nivelPopularidad: 50 (50)
	
	
	
	assert.that(matias.esElMasPopularDeSuCirculo())
	
}

test "11 - Hacer que dos Sims inicien una relacion: Carlitos y Carla inician una relación y cambian su estado"{
	var carlitos = new Sim()
	var carlita = new Sim()
	
	carlitos.iniciarRelacionCon(carlita)
	
	assert.equals("Relacion",carlitos.situacionSentimental())
	assert.equals("Relacion",carlita.situacionSentimental())
}

test "12.0 - Saber si un Sim forma parte de una relacion: Carlitos y Carla forman parte de una relacion"{
	var carlitos = new Sim()
	var carlita = new Sim()
	
	carlitos.iniciarRelacionCon(carlita)
	
	assert.that(carlitos.formaParteDeUnaRelacion())
	assert.that(carlitos.formaParteDeUnaRelacion())
}

test "12.1 - Saber si un sim forma parte de una relacion: Roberto esta soltero"{
	var roberto = new Sim()
		
	assert.that(not(roberto.formaParteDeUnaRelacion()))
}

test "13 - Hacer que una relacion termine haciendo que sus miembros dejen de formar parte de ella" {
	var carlo = new Sim()
	var carla = new Sim()
	
	carlo.iniciarRelacionCon(carla)
	
	carlo.terminarRelacionCon(carla)

	assert.equals("Soltero",carlo.situacionSentimental())
	assert.equals("Soltero",carla.situacionSentimental())	
}

test "14.0 - Saber si una relación terminó" {
	var carlo = new Sim()
	var carla = new Sim()
	
	carlo.iniciarRelacionCon(carla)
	
	carlo.terminarRelacionCon(carla)
	
	assert.that(carlo.terminoCon(carla))
}

test "14.1 - Saber si una relación terminó" {
	var carlo = new Sim()
	var carla = new Sim()
	
	carlo.iniciarRelacionCon(carla)
	
	carlo.terminarRelacionCon(carla)
	
	assert.that(carla.terminoCon(carlo))
}


test "15.0 - Conocer el circulo de amigos de una relacion: dos novios fusionan a sus amigos sin repetidos" {
	var carlo = new Sim()
	var carla = new Sim()
	
	var jose = new Sim()
	var martin = new Sim()
	carlo.amigos([jose,martin])
	
	var carolina = new Sim()
	carla.amigos([carolina,jose])
	
	carlo.iniciarRelacionCon(carla)
	
	assert.equals(#{jose,martin,carolina},carlo.amigos())
}

test "15.1 - Conocer el circulo de amigos de una relacion: si termina la relacion no pierde a sus amigos"{
	var carlo = new Sim()
	var carla = new Sim()
	
	var jose = new Sim()
	var martin = new Sim()
	carlo.amigos([jose,martin])
	
	var carolina = new Sim()
	carla.agregarAmigo(carolina)
	
	carlo.iniciarRelacionCon(carla)
	
	carlo.terminarRelacionCon(carla)
	
	assert.equals(#{jose,martin},carlo.amigos())
	assert.equals(#{carolina},carla.amigos())
}

test "16 - Conocer a los miembros de una relacion (siempre son dos)" {
	var carlo = new Sim()
	var carla = new Sim()
	
	carla.iniciarRelacionCon(carlo)
	
	assert.equals([carla,carlo],carla.miembrosDeLaRelacion())
}

test "17.0 - Saber si una relacion funciona: carlos y juan no se atraen, entonces no funciona" {
	var carlo = new Sim() carlo.sexo("Masculino") carlo.preferenciaSexual("Femenino")
	var juan = new Sim() juan.sexo("Masculino") juan.preferenciaSexual("Femenino")
	
	assert.that(not(carlo.funcionaRelacionCon(juan)) && not(juan.funcionaRelacionCon(carlo)) )
}

test "17.1 - Saber si una relacion funcina: carlo y carla se atren, entonces funciona" {
	var carlo = new Sim() carlo.sexo("Masculino") carlo.preferenciaSexual("Femenino") carlo.personalidad(buenazo)
	var carla = new Sim() carla.sexo("Femenino") carla.preferenciaSexual("Masculino") carla.personalidad(buenazo)
	
	assert.that(carlo.funcionaRelacionCon(carla) && carla.funcionaRelacionCon(carlo))
		
}

test "20.0 - Saber si un Sim se siente atraido por otro: 
Si a María le gustan los Hombres, y a Juan las mujeres, no van a sentir atracción de otro Sexo"{
	
	var maria = new Sim() maria.sexo("Mujer")
	var juan = new Sim() juan.sexo("Hombre")
	
	maria.preferenciaSexual("Hombre")
	juan.preferenciaSexual("Mujer")
	
	var ramona = new Sim() ramona.sexo("Mujer")
	var roberto = new Sim() roberto.sexo("Hombre")
	
	assert.that(not(maria.leAtrae(ramona)))
	assert.that(not(juan.leAtrae(roberto)))
	
}

test "20.1 - Saber si un Sim se siente atraido por otro: 
A un sim Interesado le atrae aquel Sim que duplica su fortuna"{
	var matias = new Sim() matias.sexo("Hombre")
	var maria = new Sim() maria.personalidad(interesado)
	
	matias.preferenciaSexual("Mujer")
	maria.preferenciaSexual("Hombre")
	
	matias.dinero(200)
	maria.dinero(100)
	
	assert.that(maria.leAtrae(matias))
}

test "20.2 - Saber si un Sim se siente atraido por otro: 
A un Sim Superficial le atrae los que tienen tanta o mas popularidad 
que el mas popular de sus amigos, y además que sean jóvenes"{
	
	//sim superficial: franco
	var franco = new Sim() 
	franco.personalidad(superficial)
	franco.preferenciaSexual("Femenino")
	
	//amigos de franco:
	var melina = new Sim()
	var federico = new Sim ()
	franco.amigos([melina,federico])
	
		//popularidad de los amigos de franco, para eso se crea nivelFelicidad de los amigos de federico y melina
			var amigo1 = new Sim() amigo1.nivelFelicidad(70) melina.agregarAmigo(amigo1)
			var amigo2 = new Sim() amigo2.nivelFelicidad(55) federico.agregarAmigo(amigo2)
	
	//simQueLeAtrae
	var catalina = new Sim() 
	catalina.sexo("Femenino")
	catalina.edad(25)
	
		//popularidad de Catalina, para eso se crea nivelFelicidad de algun amigo de ella
		var amigo3 = new Sim() amigo3.nivelFelicidad(75) // es mas popular que el mas popular de los amigos de franco
		catalina.agregarAmigo(amigo3)
		
	assert.that(franco.leAtrae(catalina))
	
	
}

test "20.3 - Saber si un Sim se siente atraido por otro: 
A un Sim Superficial le atrae los que tienen tanta o mas popularidad 
que el mas popular de sus amigos, y además que sean jóvenes"{
	
	//sim superficial: franco
	var franco = new Sim() 
	franco.personalidad(superficial)
	franco.preferenciaSexual("Femenino")
	
	//amigos de franco:
	var melina = new Sim()
	var federico = new Sim ()
	franco.amigos([melina,federico])
	
		//popularidad de los amigos de franco, para eso se crea nivelFelicidad de los amigos de federico y melina
			var amigo1 = new Sim() amigo1.nivelFelicidad(70) melina.agregarAmigo(amigo1)
			var amigo2 = new Sim() amigo2.nivelFelicidad(55) federico.agregarAmigo(amigo2)
	
	//simQueLeAtrae
	var catalina = new Sim() 
	catalina.sexo("Femenino")
	catalina.edad(25)
	
		//popularidad de Catalina, para eso se crea nivelFelicidad de algun amigo de ella
		var amigo3 = new Sim() amigo3.nivelFelicidad(20) // NO es mas popular que el mas popular de los amigos de franco
		catalina.agregarAmigo(amigo3)
		
	assert.that(not (franco.leAtrae(catalina)))
}

test "20.4 - Saber si un Sim se siente atraido por otro: 
A un Sim Buenazo le atrae cualquier Sim (siempre y cuando se respete el sexo de atracción)"{
	var carolina = new Sim()
	carolina.sexo("Femenino")
	carolina.preferenciaSexual("Masculino")
	carolina.personalidad(buenazo)
	
	var lucas = new Sim() lucas.sexo("Masculino")
	var matias = new Sim() matias.sexo("Masculino")
	
	assert.that(carolina.leAtrae(lucas))
	assert.that(carolina.leAtrae(matias))
}

test "20.5 - Saber si un Sim se siente atraido por otro: 
A un Sim Peleado con la vida les atraen los sims tristes de menos de 200 puntos de felicidad"{
	var lucas = new Sim()
	lucas.personalidad(peleadoConLaVida)
	lucas.preferenciaSexual("Femenino")
	
	var carolina = new Sim()
	carolina.sexo("Femenino")
	carolina.nivelFelicidad(32)
	
	assert.that(lucas.leAtrae(carolina))
}

test "20.6 - Saber si un Sim se siente atraido por otro: 
A un Sim Peleado con la vida les atraen los sims tristes de menos de 200 puntos de felicidad"{
	var lucas = new Sim()
	lucas.personalidad(peleadoConLaVida)
	lucas.preferenciaSexual("Femenino")
	
	var carolina = new Sim()
	carolina.sexo("Femenino")
	carolina.nivelFelicidad(500)
	
	assert.that(not(lucas.leAtrae(carolina)))
}

test "21 - Dada una colección de Sims, encontrar los Sims por los que se siente atraído otro Sim"{
	var carlos = new Sim() carlos.sexo("Masculino")
	var juan = new Sim() juan.sexo("Masculino")
	var pedro = new Sim() pedro.sexo("Masculino")
	
	var carolina = new Sim()
	carolina.preferenciaSexual("Masculino")
	carolina.personalidad(interesado)
//supongamos que carolina se siente atraída por carlos y juan. Dada la colección, 
//devolvera cuáles son los sims por los que se siente atraída carolina
	
	carolina.dinero(500)
	carlos.dinero(1000)
	juan.dinero(1000)
	pedro.dinero(230)
	
	assert.equals([carlos,juan],carolina.simsQueLeAtraen([carlos,juan,pedro]))
	
}

test "22 - Contarle una información a un Sim" {
	var homero = new Sim()
	
	homero.recibirInformacion("La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa")
	
	assert.equals(["La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa"], homero.informacion())

	homero.recibirInformacion("A la grande le puse cuca")
	
	assert.equals(["La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa","A la grande le puse cuca"], homero.informacion())
}

test "23 - Saber cuán conocedor es un Sim: saber la cantidad de caracteres total de todos sus 
conocimientos" {
	var homero = new Sim()
	
	homero.recibirInformacion("A la grande le puse cuca")
	
	assert.equals(24,homero.conocimiento() )
	
}

test "24 - Saber si un Sim tiene un conocimiento dado" {
	var homero = new Sim()
	
	homero.recibirInformacion("La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa")
	
	assert.that(homero.conoceInformacion("La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa"))
	
}

test "25 - Hacer que un Sim tenga amnesia y se olvide (irreversiblemente) todos sus conocimientos" {
	var pedro = new Sim()
	
	pedro.recibirInformacion("La suma de los cuadrados de los catetos dan igual al cuadrado de la hipotenusa")
	pedro.recibirInformacion("A la grande le puse cuca")
	
	pedro.tenerAmnesia()
	
	assert.equals([],pedro.informacion())
}

test "26 - Hacer que un Sim tenga un estado de ánimo particular:
Si el Sim es soniador , vuelve a la normalidad y se vuelve incómodo"{
	var juan = new Sim()
	
	juan.nivelFelicidad(500)
	juan.recibirInformacion("A la grande le puse cuca")
	
	juan.estadoDeAnimo(soniador)
	
	assert.equals([],juan.informacion())
	assert.equals(1500, juan.nivelFelicidad())
	
	juan.estadoDeAnimo(normal)
	
	assert.equals(["A la grande le puse cuca"],juan.informacion())
	assert.equals(500, juan.nivelFelicidad())
	
	juan.estadoDeAnimo(incomodo)
	
	assert.equals(["A la grande le puse cuca"],juan.informacion())
	assert.equals(300, juan.nivelFelicidad())	
	
	
}

test "27 - Hacer que a un Sim se le vaya su estado de ánimo actual (incomodo) y vuelva a la normalidad"{
	var jose = new Sim()
	
	jose.estadoDeAnimo(incomodo)
	
	assert.equals(-200,jose.nivelFelicidad())
	assert.equals(incomodo,jose.estadoDeAnimo())
	
	jose.estadoDeAnimo(normal)
	
	assert.equals(0,jose.nivelFelicidad())
	assert.equals(normal,jose.estadoDeAnimo())
}